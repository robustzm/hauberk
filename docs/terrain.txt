Themes:
- cavern
- crypt
- keep
- dungeon
- swamp
- wood
- tower
- castle
- sewer
- ossuary
- bailey

Terrain:
- swamp, bog
- lake, pond, well
- river, stream, creek
- chasm, hole, pit, crevasse
- splatter, stain, slime
- jail cell, barred walls, cage
- tombstone, grave
- trees, bushes, shrubs
- grass
- crystals
- stone, rock, tile
- planking
- lava
- spider webs

- types of water
  - water
  - mud
  - slime (various elements?)
  - blood
  - pit (drops you down a level)
  - void (eternal nothingness)
  - ice
  - fire
  - lava
  - poison

Q: To what degree to level features span and supercede rooms versus being
   encapsulated by them?

A: We want both. Spanning features are needed to give the level a bigger
   structure beyond just a sea of individual rooms. Themed rooms make each
   room more interesting.

   We can maybe tie the two together by painting portions of the level with
   blobs of themes. Those blobs can directly effect the level -- think big
   lakes, rivers, etc. But they also can affect which room types,
   encounters, and decorations are chosen for rooms within that blob.

   For example, a big "cemetary" blob might cause clouds of pestilence to smear
   around the level. Also, rooms in there are more likely to contain crypts,
   tombstones, and undead.

There's a tendency to want each theme to be a complete level make over -- a
"cemetary" theme should look like a cemetary with wide open grassy spaces,
aligned rows of tombstone, paths, etc. That's appealing, but it means making
N different carefully controlled level generation algorithms, and once you've
seen all N, they get boring.

Instead, it's probably worth sacrificing realism by making the themes more
vague but also overlappable and more integrated with the room types.

---

OK, so here's a plan:

1.  Pick a couple of region types (maybe zero, one, more) and apply them.
    Regions are things like river, lake, forest, cemetary, zoo, etc.

    Regions may have subtypes so that the same region logic can be used for
    different kinds of terrain. So "lake" would cover water lakes, lava, etc.

    Each region knows how to apply itself to the level both by changing the
    level itself (adding water, caverns, etc.) and also claiming cells as part
    of its "territory". Some regions may not actually modify the level but
    just claim territory to theme parts of the dungeon.

    At this point, they aren't painting tiles, but more semantic "cells" like
    "floor", "wall", "doorway", etc.

3.  Generate rooms. Until enough rooms are placed:

    1.  Pick a random point on the stage. Use the territories at that point to
        select a room type. (Regions have different weights for different room
        types.)

    2.  Attempt to place a room at that point. Again, just place semantic cell
        info.

4.  Generate corridors. Fill the remaining open cells with a maze of passages
    then remove dead ends.

5.  Render the cells. This turns the high level semantic cells into concrete
    terrain tiles. By combining N room types and M render styles, we get N*M
    different room appearances.

    For each room:

    1.  Use the territories the room is in to select a room style. Convert each
        cell to a tile based on that style.

    For each other remaining cell:

    1.  Use the territories the cell is in to select a style and convert the
        cell to a tile based on that. This is mainly different kinds of rock for
        walls and floor for corridors.

6.  Add encounters. TODO.

7.  Add items. TODO.


TODO: Modify rooms after placing them? Erosion, destruction, etc.

TODO: Room decorations.

TODO: Locks and keys and other interesting features.

TODO: Stairs.

---

A big part of the reward of a roguelike is the sense of wonder you get
exploring the level and potentially seeing something you've never seen before.
Of course, any given atom of content isn't unique (though some may be really
rare). So what it really is is a unique combination of things together.

Given all that, my previous desire to make dungeon generation as fast as
possible is probably the wrong priority. It's fine if it takes thirty seconds
to build a level if you get something really rich and cool in return. (Players
do obviously need some visual feedback that things are happening during this,
of course.)

So maybe the level generator should be a lot more complex and rich, almost a
simulation of the history of the place. Treating like an iterative simulated
thing would help deliver the sort of combinatorial richness I want. Imagine
one phase that carves a room, then another that comes along and decorates it,
then an explosion happens that tears part of it apart, then later it's
partially repaired, etc.

Here's a rough idea:

1. Generate the geological basis for the level. Veins of different kinds of
   rock using some kind of noise. Rivers, lakes, etc.

2. Iterate on that some -- erosion, water carving out caves, rock falls, etc.
   This is sort of the geological time scale.

3. Then it slows down to the living time scale. We iteratively generate a series
   of "events", including things like:

   - A miner carves out a new room, reachable from an existing one. Just digging
     out bare rock.

   - A miner widens or reshapes an existing room if there is room to expand it.
     (They may do this even after the room has been finished sometimes.)

   - A miner builds a passageway between two nearby rooms that have no close
     path between them.

   - A builder finishes a room -- gives it a tile floor, adds doorways, etc.

   - A builder builds a bridge over a river or lake.

   - An magical misfire causes an explosion and blows apart part of the level
     and starts a fire.

   - A nest of slimes takes up residence, eroding an area and possibly dying
     off.

   - A room becomes decrepit and dusty from disuse. Maybe a spider takes
     residence, leaving webs behind.

   - Someone claims a distant room to store their treasure horde. They put in
     a locked door and chests.

   - A frequently used passageway is widened.

   I don't know if I want to go so far as to actually simulate the various
   monsters living and wandering around the level, but it's possible.

4. After some number of these events the level is done. Then inhabitants and
   loot are dropped. (It might be nice to work those into the events somehow
   so that monsters and items seem to appear in "logical" places.)
